{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["short","require","useStyles","makeStyles","theme","root","height","container","display","item","border","position","iframe","width","addBtn","right","bottom","cover","backgroundColor","control","left","zIndex","fontSize","fontWeight","shortenURL","overflow","App","classes","prevURL","URL","window","location","searchParams","get","parsedURL","JSON","parse","map","e","active","useState","open","setOpen","url","setURL","urls","setURLS","handleClose","iframes","index","className","src","type","value","onClick","target","select","gridTemplateColumns","join","style","Fab","color","Dialog","onClose","DialogContent","TextField","autoFocus","margin","id","label","fullWidth","onChange","console","log","DialogActions","Button","err","surl","title","nextURL","set","stringify","history","pushState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56894636.chunk.js","sourcesContent":["import './App.css';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Button, Dialog, DialogActions, DialogContent, TextField} from \"@material-ui/core\";\nimport {useState} from \"react\";\n\n//import {short} from \"node-url-shortener\";\nconst short = require(\"node-url-shortener\");\n\nconst pingURL = 'https://docs.google.com/spreadsheets/d/1MsDJxO9xOHl8LE02n34n51hxwTA_usDn-Yta4Y84LeU/copy';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: '100vh'\n    },\n    container: {\n        display: 'grid',\n        height:'100%'\n    },\n    item: {\n        border:'1px solid black',\n        position:'relative'\n    },\n    iframe: {\n        width: '100%',\n        height: '100vh'\n    },\n    addBtn: {\n        position: 'absolute',\n        right: '1rem',\n        bottom: '1rem'\n    },\n    cover:{\n        width:'100%',\n        height:'100%',\n        backgroundColor:'gray',\n        border:'5px solid black'\n    },\n    control:{\n        position:\"absolute\",\n        bottom:'1rem',\n        left:'1rem',\n        zIndex:10000,\n        fontSize:'2rem',\n        fontWeight:'bold'\n    },\n    shortenURL:{\n        border:'none',\n        overflow:'visible',\n        fontSize:'1.5rem',\n        width:'20rem'\n    }\n}));\n\nfunction App() {\n    const classes = useStyles();\n\n    const prevURLObj = new URL(window.location);\n    const prevURL = prevURLObj.searchParams.get('p');\n    var parsedURL = JSON.parse(prevURL);\n    parsedURL = parsedURL === null ? [] : parsedURL;\n    parsedURL = parsedURL.map((e)=>{\n        e.active = false;\n        return e;\n    })\n    const [open, setOpen] = useState(false);\n    const [url, setURL] = useState(null);\n    const [urls, setURLS] = useState(\n        parsedURL === null ? [] : parsedURL\n    );\n    const handleClose = () => {\n        setOpen(false);\n    };\n    const handleAdd = () => {\n        handleClose();\n        short.short(url, (err, surl)=>{\n            setURLS([...urls, {url:surl, title:null, active:true}]);\n            const nextURL = new URL(window.location);\n            nextURL.searchParams.set('p', JSON.stringify([...urls, {url:surl, title:null, active:false}]));\n            window.history.pushState(null, null, nextURL);\n            setURL('');\n        })\n    }\n    const handleMake = () => {\n        window.open(pingURL);\n    }\n    const iframes = urls.map((e, index) => {\n        return <div key={index} className={classes.item}>\n            <iframe src={e.url} className={classes.iframe}></iframe>\n            <div className={classes.control}\n            ><input className={classes.shortenURL} type=\"text\" value={urls[index].url} onClick={(e)=>{e.target.select();}}></input></div>\n        </div>\n    })\n    const gridTemplateColumns = urls.map((e) => '1fr').join(' ');\n    return (\n        <div className={classes.root}>\n            <div className={classes.container} style={{gridTemplateColumns: gridTemplateColumns}}>\n                {iframes}\n            </div>\n            <Fab color=\"primary\" aria-label=\"add\" className={classes.addBtn}>\n                <AddIcon onClick={() => {\n                    setOpen(true);\n                }}/>\n            </Fab>\n            <Dialog open={open} onClose={handleClose}>\n                <DialogContent>\n                    복제한 ping 시트의 주소를 입력해주세요.\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"URL\"\n                        type=\"url\"\n                        fullWidth\n                        onChange={(e) => {\n                            setURL(e.target.value);\n                            console.log(e.target.value)\n                        }}\n                        value={url}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        취소\n                    </Button>\n                    <Button onClick={handleAdd} color=\"primary\">\n                        핑추가\n                    </Button>\n                    <Button onClick={handleMake} color=\"primary\">\n                        핑복사\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}